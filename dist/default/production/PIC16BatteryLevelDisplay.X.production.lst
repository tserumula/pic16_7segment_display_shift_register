

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sun Sep 15 15:14:43 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F1459
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,space=0,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 07/09/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F1459 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0008                     bsr             equ	8
    53     0005                     fsr0h           equ	5
    54     0004                     fsr0l           equ	4
    55     0007                     fsr1h           equ	7
    56     0006                     fsr1l           equ	6
    57     0000                     indf            equ	0
    58     0000                     indf0           equ	0
    59     0001                     indf1           equ	1
    60     000B                     intcon          equ	11
    61     0002                     pc              equ	2
    62     0002                     pcl             equ	2
    63     000A                     pclath          equ	10
    64     0003                     status          equ	3
    65     0009                     wreg            equ	9
    66     0000                     INDF0           equ	0	;# 
    67     0001                     INDF1           equ	1	;# 
    68     0002                     PCL             equ	2	;# 
    69     0003                     STATUS          equ	3	;# 
    70     0004                     FSR0L           equ	4	;# 
    71     0005                     FSR0H           equ	5	;# 
    72     0006                     FSR1L           equ	6	;# 
    73     0007                     FSR1H           equ	7	;# 
    74     0008                     BSR             equ	8	;# 
    75     0009                     WREG            equ	9	;# 
    76     000A                     PCLATH          equ	10	;# 
    77     000B                     INTCON          equ	11	;# 
    78     000C                     PORTA           equ	12	;# 
    79     000D                     PORTB           equ	13	;# 
    80     000E                     PORTC           equ	14	;# 
    81     0011                     PIR1            equ	17	;# 
    82     0012                     PIR2            equ	18	;# 
    83     0015                     TMR0            equ	21	;# 
    84     0016                     TMR1            equ	22	;# 
    85     0016                     TMR1L           equ	22	;# 
    86     0017                     TMR1H           equ	23	;# 
    87     0018                     T1CON           equ	24	;# 
    88     0019                     T1GCON          equ	25	;# 
    89     001A                     TMR2            equ	26	;# 
    90     001B                     PR2             equ	27	;# 
    91     001C                     T2CON           equ	28	;# 
    92     008C                     TRISA           equ	140	;# 
    93     008D                     TRISB           equ	141	;# 
    94     008E                     TRISC           equ	142	;# 
    95     0091                     PIE1            equ	145	;# 
    96     0092                     PIE2            equ	146	;# 
    97     0095                     OPTION_REG      equ	149	;# 
    98     0096                     PCON            equ	150	;# 
    99     0097                     WDTCON          equ	151	;# 
   100     0098                     OSCTUNE         equ	152	;# 
   101     0099                     OSCCON          equ	153	;# 
   102     009A                     OSCSTAT         equ	154	;# 
   103     009B                     ADRES           equ	155	;# 
   104     009B                     ADRESL          equ	155	;# 
   105     009C                     ADRESH          equ	156	;# 
   106     009D                     ADCON0          equ	157	;# 
   107     009E                     ADCON1          equ	158	;# 
   108     009F                     ADCON2          equ	159	;# 
   109     010C                     LATA            equ	268	;# 
   110     010D                     LATB            equ	269	;# 
   111     010E                     LATC            equ	270	;# 
   112     0111                     CM1CON0         equ	273	;# 
   113     0112                     CM1CON1         equ	274	;# 
   114     0113                     CM2CON0         equ	275	;# 
   115     0114                     CM2CON1         equ	276	;# 
   116     0115                     CMOUT           equ	277	;# 
   117     0116                     BORCON          equ	278	;# 
   118     0117                     FVRCON          equ	279	;# 
   119     0118                     DACCON0         equ	280	;# 
   120     0119                     DACCON1         equ	281	;# 
   121     011D                     APFCON          equ	285	;# 
   122     018C                     ANSELA          equ	396	;# 
   123     018D                     ANSELB          equ	397	;# 
   124     018E                     ANSELC          equ	398	;# 
   125     0191                     PMADR           equ	401	;# 
   126     0191                     PMADRL          equ	401	;# 
   127     0192                     PMADRH          equ	402	;# 
   128     0193                     PMDAT           equ	403	;# 
   129     0193                     PMDATL          equ	403	;# 
   130     0194                     PMDATH          equ	404	;# 
   131     0195                     PMCON1          equ	405	;# 
   132     0196                     PMCON2          equ	406	;# 
   133     0197                     VREGCON         equ	407	;# 
   134     0199                     RCREG           equ	409	;# 
   135     019A                     TXREG           equ	410	;# 
   136     019B                     SPBRG           equ	411	;# 
   137     019B                     SPBRGL          equ	411	;# 
   138     019C                     SPBRGH          equ	412	;# 
   139     019D                     RCSTA           equ	413	;# 
   140     019E                     TXSTA           equ	414	;# 
   141     019F                     BAUDCON         equ	415	;# 
   142     020C                     WPUA            equ	524	;# 
   143     020D                     WPUB            equ	525	;# 
   144     0211                     SSP1BUF         equ	529	;# 
   145     0211                     SSPBUF          equ	529	;# 
   146     0212                     SSP1ADD         equ	530	;# 
   147     0212                     SSPADD          equ	530	;# 
   148     0213                     SSP1MSK         equ	531	;# 
   149     0213                     SSPMSK          equ	531	;# 
   150     0214                     SSP1STAT        equ	532	;# 
   151     0214                     SSPSTAT         equ	532	;# 
   152     0215                     SSP1CON1        equ	533	;# 
   153     0215                     SSPCON          equ	533	;# 
   154     0215                     SSPCON1         equ	533	;# 
   155     0216                     SSP1CON2        equ	534	;# 
   156     0216                     SSPCON2         equ	534	;# 
   157     0217                     SSP1CON3        equ	535	;# 
   158     0217                     SSPCON3         equ	535	;# 
   159     0391                     IOCAP           equ	913	;# 
   160     0392                     IOCAN           equ	914	;# 
   161     0393                     IOCAF           equ	915	;# 
   162     0394                     IOCBP           equ	916	;# 
   163     0395                     IOCBN           equ	917	;# 
   164     0396                     IOCBF           equ	918	;# 
   165     039A                     CLKRCON         equ	922	;# 
   166     039B                     ACTCON          equ	923	;# 
   167     0611                     PWM1DCL         equ	1553	;# 
   168     0612                     PWM1DCH         equ	1554	;# 
   169     0613                     PWM1CON         equ	1555	;# 
   170     0613                     PWM1CON0        equ	1555	;# 
   171     0614                     PWM2DCL         equ	1556	;# 
   172     0615                     PWM2DCH         equ	1557	;# 
   173     0616                     PWM2CON         equ	1558	;# 
   174     0616                     PWM2CON0        equ	1558	;# 
   175     0691                     CWG1DBR         equ	1681	;# 
   176     0692                     CWG1DBF         equ	1682	;# 
   177     0693                     CWG1CON0        equ	1683	;# 
   178     0694                     CWG1CON1        equ	1684	;# 
   179     0695                     CWG1CON2        equ	1685	;# 
   180     0E8E                     UCON            equ	3726	;# 
   181     0E8F                     USTAT           equ	3727	;# 
   182     0E90                     UIR             equ	3728	;# 
   183     0E91                     UCFG            equ	3729	;# 
   184     0E92                     UIE             equ	3730	;# 
   185     0E93                     UEIR            equ	3731	;# 
   186     0E94                     UFRM            equ	3732	;# 
   187     0E94                     UFRMH           equ	3732	;# 
   188     0E95                     UFRML           equ	3733	;# 
   189     0E96                     UADDR           equ	3734	;# 
   190     0E97                     UEIE            equ	3735	;# 
   191     0E98                     UEP0            equ	3736	;# 
   192     0E99                     UEP1            equ	3737	;# 
   193     0E9A                     UEP2            equ	3738	;# 
   194     0E9B                     UEP3            equ	3739	;# 
   195     0E9C                     UEP4            equ	3740	;# 
   196     0E9D                     UEP5            equ	3741	;# 
   197     0E9E                     UEP6            equ	3742	;# 
   198     0E9F                     UEP7            equ	3743	;# 
   199     0FE4                     STATUS_SHAD     equ	4068	;# 
   200     0FE5                     WREG_SHAD       equ	4069	;# 
   201     0FE6                     BSR_SHAD        equ	4070	;# 
   202     0FE7                     PCLATH_SHAD     equ	4071	;# 
   203     0FE8                     FSR0L_SHAD      equ	4072	;# 
   204     0FE9                     FSR0H_SHAD      equ	4073	;# 
   205     0FEA                     FSR1L_SHAD      equ	4074	;# 
   206     0FEB                     FSR1H_SHAD      equ	4075	;# 
   207     0FED                     STKPTR          equ	4077	;# 
   208     0FEE                     TOSL            equ	4078	;# 
   209     0FEF                     TOSH            equ	4079	;# 
   210                           
   211                           	psect	idataBANK0
   212     0143                     __pidataBANK0:
   213                           
   214                           ;initializer for _batteryLevel
   215     0143  344B               	retlw	75
   216     000B                     _INTCONbits     set	11
   217     000E                     _PORTCbits      set	14
   218     000C                     _PORTAbits      set	12
   219     009D                     _ADCON0         set	157
   220     0091                     _PIE1bits       set	145
   221     008D                     _TRISBbits      set	141
   222     008E                     _TRISCbits      set	142
   223     008C                     _TRISAbits      set	140
   224     0099                     _OSCCONbits     set	153
   225     010D                     _LATBbits       set	269
   226     010E                     _LATCbits       set	270
   227     010C                     _LATAbits       set	268
   228     018E                     _ANSELC         set	398
   229     018D                     _ANSELB         set	397
   230     018C                     _ANSELA         set	396
   231     019D                     _RCSTAbits      set	413
   232     0396                     _IOCBFbits      set	918
   233     0394                     _IOCBPbits      set	916
   234     0395                     _IOCBN          set	917
   235                           
   236                           	psect	cinit
   237     0019                     start_initialization:	
   238                           ; #config settings
   239                           
   240     0019                     __initialization:
   241                           
   242                           ; Initialize objects allocated to BANK0
   243     0019  3181  2143  3180   	fcall	__pidataBANK0	;fetch initializer
   244     001C  00A2               	movwf	__pdataBANK0& (0+127)
   245                           
   246                           ; Clear objects allocated to COMMON
   247     001D  01F9               	clrf	__pbssCOMMON& (0+127)
   248     001E  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   249     001F  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   250     0020  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
   251     0021  01FD               	clrf	(__pbssCOMMON+4)& (0+127)
   252                           
   253                           ; Clear objects allocated to BANK0
   254     0022  01A0               	clrf	__pbssBANK0& (0+127)
   255     0023  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   256     0024                     end_of_initialization:	
   257                           ;End of C runtime variable initialization code
   258                           
   259     0024                     __end_of__initialization:
   260     0024  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   261     0025  0020               	movlb	0
   262     0026  3180  2828         	ljmp	_main	;jump to C main() function
   263                           
   264                           	psect	bssCOMMON
   265     0079                     __pbssCOMMON:
   266     0079                     _segPattern1:
   267     0079                     	ds	1
   268     007A                     _segPattern0:
   269     007A                     	ds	1
   270     007B                     _batteryDigit2:
   271     007B                     	ds	1
   272     007C                     _batteryDigit1:
   273     007C                     	ds	1
   274     007D                     _batteryDigit0:
   275     007D                     	ds	1
   276                           
   277                           	psect	bssBANK0
   278     0020                     __pbssBANK0:
   279     0020                     _turnOnDisplay:
   280     0020                     	ds	1
   281     0021                     _segPattern2:
   282     0021                     	ds	1
   283                           
   284                           	psect	dataBANK0
   285     0022                     __pdataBANK0:
   286     0022                     _batteryLevel:
   287     0022                     	ds	1
   288                           
   289                           	psect	cstackCOMMON
   290     0070                     __pcstackCOMMON:
   291     0070                     ?_get7SegmentPattern:
   292     0070                     ?_displayDigits:	
   293                           ; 1 bytes @ 0x0
   294                           
   295     0070                     ?_setButtonInterrupt:	
   296                           ; 1 bytes @ 0x0
   297                           
   298     0070                     ?_ISR:	
   299                           ; 1 bytes @ 0x0
   300                           
   301     0070                     ?_main:	
   302                           ; 1 bytes @ 0x0
   303                           
   304     0070                     get7SegmentPattern@digit:	
   305                           ; 1 bytes @ 0x0
   306                           
   307     0070                     displayDigits@digit1:	
   308                           ; 1 bytes @ 0x0
   309                           
   310     0070                     ??_get7SegmentPattern:	
   311                           ; 1 bytes @ 0x0
   312                           
   313     0070                     ??_setButtonInterrupt:	
   314                           ; 1 bytes @ 0x0
   315                           
   316     0070                     ??_ISR:	
   317                           ; 1 bytes @ 0x0
   318                           
   319                           
   320                           ; 1 bytes @ 0x0
   321     0070                     	ds	1
   322     0071                     get7SegmentPattern@pattern:
   323     0071                     displayDigits@digit2:	
   324                           ; 1 bytes @ 0x1
   325                           
   326                           
   327                           ; 1 bytes @ 0x1
   328     0071                     	ds	1
   329     0072                     ??_displayDigits:
   330                           
   331                           ; 1 bytes @ 0x2
   332     0072                     	ds	2
   333     0074                     displayDigits@digit0:
   334                           
   335                           ; 1 bytes @ 0x4
   336     0074                     	ds	1
   337     0075                     displayDigits@i:
   338                           
   339                           ; 2 bytes @ 0x5
   340     0075                     	ds	2
   341     0077                     ??_main:
   342                           
   343                           ; 1 bytes @ 0x7
   344     0077                     	ds	2
   345                           
   346                           	psect	maintext
   347     0028                     __pmaintext:	
   348 ;;
   349 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   350 ;;
   351 ;; *************** function _main *****************
   352 ;; Defined at:
   353 ;;		line 137 in file "main.c"
   354 ;; Parameters:    Size  Location     Type
   355 ;;		None
   356 ;; Auto vars:     Size  Location     Type
   357 ;;		None
   358 ;; Return value:  Size  Location     Type
   359 ;;                  1    wreg      void 
   360 ;; Registers used:
   361 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   362 ;; Tracked objects:
   363 ;;		On entry : B1F/0
   364 ;;		On exit  : 0/0
   365 ;;		Unchanged: 0/0
   366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   369 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   370 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   371 ;;Total ram usage:        2 bytes
   372 ;; Hardware stack levels required when called: 2
   373 ;; This function calls:
   374 ;;		_displayDigits
   375 ;;		_get7SegmentPattern
   376 ;;		_setButtonInterrupt
   377 ;; This function is called by:
   378 ;;		Startup code after reset
   379 ;; This function uses a non-reentrant model
   380 ;;
   381                           
   382     0028                     _main:	
   383                           ;psect for function _main
   384                           
   385     0028                     l885:	
   386                           ;incstack = 0
   387                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   388                           
   389                           
   390                           ;main.c: 140:     OSCCONbits.SCS0 = 1;
   391     0028  0021               	movlb	1	; select bank1
   392     0029  1419               	bsf	25,0	;volatile
   393                           
   394                           ;main.c: 141:     OSCCONbits.SCS1 = 1;
   395     002A  1499               	bsf	25,1	;volatile
   396                           
   397                           ;main.c: 144:     OSCCONbits.IRCF0 = 1;
   398     002B  1519               	bsf	25,2	;volatile
   399                           
   400                           ;main.c: 145:     OSCCONbits.IRCF1 = 0;
   401     002C  1199               	bcf	25,3	;volatile
   402                           
   403                           ;main.c: 146:     OSCCONbits.IRCF2 = 1;
   404     002D  1619               	bsf	25,4	;volatile
   405                           
   406                           ;main.c: 147:     OSCCONbits.IRCF3 = 1;
   407     002E  1699               	bsf	25,5	;volatile
   408     002F                     l887:
   409                           
   410                           ;main.c: 149:     _delay((unsigned long)((500)*(4000000/4000.0)));
   411     002F  3003               	movlw	3
   412     0030  00F8               	movwf	??_main+1
   413     0031  308A               	movlw	138
   414     0032  00F7               	movwf	??_main
   415     0033  3056               	movlw	86
   416     0034                     u537:
   417     0034  0B89               	decfsz	9,f
   418     0035  2834               	goto	u537
   419     0036  0BF7               	decfsz	??_main,f
   420     0037  2834               	goto	u537
   421     0038  0BF8               	decfsz	??_main+1,f
   422     0039  2834               	goto	u537
   423     003A                     l889:
   424                           
   425                           ;main.c: 153:     TRISAbits.TRISA5 = 0;
   426     003A  0021               	movlb	1	; select bank1
   427     003B  128C               	bcf	12,5	;volatile
   428     003C                     l891:
   429                           
   430                           ;main.c: 154:     TRISAbits.TRISA4 = 0;
   431     003C  120C               	bcf	12,4	;volatile
   432     003D                     l893:
   433                           
   434                           ;main.c: 156:     TRISCbits.TRISC5 = 0;
   435     003D  128E               	bcf	14,5	;volatile
   436     003E                     l895:
   437                           
   438                           ;main.c: 157:     TRISCbits.TRISC4 = 0;
   439     003E  120E               	bcf	14,4	;volatile
   440     003F                     l897:
   441                           
   442                           ;main.c: 158:     TRISCbits.TRISC3 = 0;
   443     003F  118E               	bcf	14,3	;volatile
   444     0040                     l899:
   445                           
   446                           ;main.c: 160:     TRISBbits.TRISB7 = 0;
   447     0040  138D               	bcf	13,7	;volatile
   448     0041                     l901:
   449                           
   450                           ;main.c: 162:     LATAbits.LATA5 = 0;
   451     0041  0022               	movlb	2	; select bank2
   452     0042  128C               	bcf	12,5	;volatile
   453     0043                     l903:
   454                           
   455                           ;main.c: 163:     LATAbits.LATA4 = 0;
   456     0043  120C               	bcf	12,4	;volatile
   457     0044                     l905:
   458                           
   459                           ;main.c: 165:     LATCbits.LATC5 = 0;
   460     0044  128E               	bcf	14,5	;volatile
   461     0045                     l907:
   462                           
   463                           ;main.c: 166:     LATCbits.LATC4 = 0;
   464     0045  120E               	bcf	14,4	;volatile
   465     0046                     l909:
   466                           
   467                           ;main.c: 167:     LATCbits.LATC3 = 0;
   468     0046  118E               	bcf	14,3	;volatile
   469     0047                     l911:
   470                           
   471                           ;main.c: 169:     LATBbits.LATB7 = 0;
   472     0047  138D               	bcf	13,7	;volatile
   473     0048                     l913:
   474                           
   475                           ;main.c: 172:     TRISBbits.TRISB5 = 1;
   476     0048  0021               	movlb	1	; select bank1
   477     0049  168D               	bsf	13,5	;volatile
   478     004A                     l915:
   479                           
   480                           ;main.c: 173:     RCSTAbits.SPEN = 0;
   481     004A  0023               	movlb	3	; select bank3
   482     004B  139D               	bcf	29,7	;volatile
   483     004C                     l917:
   484                           
   485                           ;main.c: 174:     PIE1bits.TXIE = 0;
   486     004C  0021               	movlb	1	; select bank1
   487     004D  1211               	bcf	17,4	;volatile
   488     004E                     l919:
   489                           
   490                           ;main.c: 178:     ADCON0 = 0x0;
   491     004E  019D               	clrf	29	;volatile
   492     004F                     l921:
   493                           
   494                           ;main.c: 179:     ANSELA = 0x0;
   495     004F  0023               	movlb	3	; select bank3
   496     0050  018C               	clrf	12	;volatile
   497     0051                     l923:
   498                           
   499                           ;main.c: 180:     ANSELB = 0x0;
   500     0051  018D               	clrf	13	;volatile
   501     0052                     l925:
   502                           
   503                           ;main.c: 181:     ANSELC = 0x0;
   504     0052  018E               	clrf	14	;volatile
   505     0053                     l927:
   506                           
   507                           ;main.c: 184:     setButtonInterrupt();
   508     0053  3181  213B  3180   	fcall	_setButtonInterrupt
   509     0056                     l929:
   510                           
   511                           ;main.c: 189:       LATBbits.LATB7 = 1;
   512     0056  0022               	movlb	2	; select bank2
   513     0057  178D               	bsf	13,7	;volatile
   514     0058                     l931:
   515                           
   516                           ;main.c: 191:       batteryDigit0 = batteryLevel / 100;
   517     0058  01FD               	clrf	_batteryDigit0
   518     0059                     l933:
   519                           
   520                           ;main.c: 192:       batteryDigit1 = batteryLevel / 10;
   521     0059  3007               	movlw	7
   522     005A  00FC               	movwf	_batteryDigit1
   523     005B                     l935:
   524                           
   525                           ;main.c: 193:       batteryDigit2 = batteryLevel % 10;
   526     005B  3005               	movlw	5
   527     005C  00FB               	movwf	_batteryDigit2
   528     005D                     l937:
   529     005D                     l939:	
   530                           ;main.c: 195:       if( batteryDigit0 == 0 ){
   531                           
   532                           
   533                           ;main.c: 197:         segPattern0 = get7SegmentPattern(11);
   534     005D  300B               	movlw	11
   535     005E  3180  20F7  3180   	fcall	_get7SegmentPattern
   536     0061  00FA               	movwf	_segPattern0
   537     0062                     l94:	
   538                           ;main.c: 202:       }
   539                           
   540                           
   541                           ;main.c: 204:       segPattern1 = get7SegmentPattern( batteryDigit1 );
   542     0062  3007               	movlw	7
   543     0063  3180  20F7  3180   	fcall	_get7SegmentPattern
   544     0066  00F9               	movwf	_segPattern1
   545                           
   546                           ;main.c: 205:       segPattern2 = get7SegmentPattern( batteryDigit2 );
   547     0067  3005               	movlw	5
   548     0068  3180  20F7  3180   	fcall	_get7SegmentPattern
   549     006B  0020               	movlb	0	; select bank0
   550     006C  00A1               	movwf	_segPattern2
   551     006D                     l943:
   552                           
   553                           ;main.c: 207:       if( turnOnDisplay == 1 ){
   554     006D  0320               	decf	_turnOnDisplay,w
   555     006E  1D03               	btfss	3,2
   556     006F  2871               	goto	u331
   557     0070  2872               	goto	u330
   558     0071                     u331:
   559     0071  2888               	goto	l951
   560     0072                     u330:
   561     0072                     l945:
   562                           
   563                           ;main.c: 209:           displayDigits( segPattern0, segPattern1, segPattern2 );
   564     0072  0879               	movf	_segPattern1,w
   565     0073  00F0               	movwf	displayDigits@digit1
   566     0074  0821               	movf	_segPattern2,w
   567     0075  00F1               	movwf	displayDigits@digit2
   568     0076  087A               	movf	_segPattern0,w
   569     0077  3180  209C  3180   	fcall	_displayDigits
   570     007A                     l947:
   571                           
   572                           ;main.c: 210:            _delay((unsigned long)((10000)*(4000000/4000.0)));
   573     007A  3033               	movlw	51
   574     007B  00F8               	movwf	??_main+1
   575     007C  30BB               	movlw	187
   576     007D  00F7               	movwf	??_main
   577     007E  30E0               	movlw	224
   578     007F                     u547:
   579     007F  0B89               	decfsz	9,f
   580     0080  287F               	goto	u547
   581     0081  0BF7               	decfsz	??_main,f
   582     0082  287F               	goto	u547
   583     0083  0BF8               	decfsz	??_main+1,f
   584     0084  287F               	goto	u547
   585     0085                     l949:
   586                           
   587                           ;main.c: 212:            turnOnDisplay = 0;
   588     0085  0020               	movlb	0	; select bank0
   589     0086  01A0               	clrf	_turnOnDisplay
   590                           
   591                           ;main.c: 214:       }else{
   592     0087  2856               	goto	l929
   593     0088                     l951:
   594                           
   595                           ;main.c: 216:         displayDigits( 0x0, 0x0, 0x0 );
   596     0088  01F0               	clrf	displayDigits@digit1
   597     0089  01F1               	clrf	displayDigits@digit2
   598     008A  3000               	movlw	0
   599     008B  3180  209C  3180   	fcall	_displayDigits
   600     008E                     l953:
   601                           
   602                           ;main.c: 217:          _delay((unsigned long)((2000)*(4000000/4000.0)));
   603     008E  300B               	movlw	11
   604     008F  00F8               	movwf	??_main+1
   605     0090  3026               	movlw	38
   606     0091  00F7               	movwf	??_main
   607     0092  305E               	movlw	94
   608     0093                     u557:
   609     0093  0B89               	decfsz	9,f
   610     0094  2893               	goto	u557
   611     0095  0BF7               	decfsz	??_main,f
   612     0096  2893               	goto	u557
   613     0097  0BF8               	decfsz	??_main+1,f
   614     0098  2893               	goto	u557
   615     0099  2856               	goto	l929
   616     009A  3180  2817         	ljmp	start
   617     009C                     __end_of_main:
   618                           
   619                           	psect	text1
   620     013B                     __ptext1:	
   621 ;; *************** function _setButtonInterrupt *****************
   622 ;; Defined at:
   623 ;;		line 105 in file "main.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;		None
   626 ;; Auto vars:     Size  Location     Type
   627 ;;		None
   628 ;; Return value:  Size  Location     Type
   629 ;;                  1    wreg      void 
   630 ;; Registers used:
   631 ;;		status,2
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   641 ;;Total ram usage:        0 bytes
   642 ;; Hardware stack levels used: 1
   643 ;; Hardware stack levels required when called: 1
   644 ;; This function calls:
   645 ;;		Nothing
   646 ;; This function is called by:
   647 ;;		_main
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651     013B                     _setButtonInterrupt:	
   652                           ;psect for function _setButtonInterrupt
   653                           
   654     013B                     l867:	
   655                           ;incstack = 0
   656                           ; Regs used in _setButtonInterrupt: [status,2]
   657                           
   658                           
   659                           ;main.c: 107:     IOCBN = 0x0;
   660     013B  0027               	movlb	7	; select bank7
   661     013C  0195               	clrf	21	;volatile
   662     013D                     l869:
   663                           
   664                           ;main.c: 108:     IOCBPbits.IOCBP5 = 1;
   665     013D  1694               	bsf	20,5	;volatile
   666     013E                     l871:
   667                           
   668                           ;main.c: 111:     INTCONbits.INTF = 0;
   669     013E  108B               	bcf	11,1	;volatile
   670     013F                     l873:
   671                           
   672                           ;main.c: 114:     INTCONbits.IOCIE = 1;
   673     013F  158B               	bsf	11,3	;volatile
   674     0140                     l875:
   675                           
   676                           ;main.c: 116:     INTCONbits.PEIE = 0;
   677     0140  130B               	bcf	11,6	;volatile
   678     0141                     l877:
   679                           
   680                           ;main.c: 117:     INTCONbits.GIE = 1;
   681     0141  178B               	bsf	11,7	;volatile
   682     0142                     l80:
   683     0142  0008               	return
   684     0143                     __end_of_setButtonInterrupt:
   685                           
   686                           	psect	text2
   687     00F7                     __ptext2:	
   688 ;; *************** function _get7SegmentPattern *****************
   689 ;; Defined at:
   690 ;;		line 60 in file "main.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;  digit           1    wreg     unsigned char 
   693 ;; Auto vars:     Size  Location     Type
   694 ;;  digit           1    0[COMMON] unsigned char 
   695 ;;  pattern         1    1[COMMON] unsigned char 
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      unsigned char 
   698 ;; Registers used:
   699 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   706 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   708 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   709 ;;Total ram usage:        2 bytes
   710 ;; Hardware stack levels used: 1
   711 ;; Hardware stack levels required when called: 1
   712 ;; This function calls:
   713 ;;		Nothing
   714 ;; This function is called by:
   715 ;;		_main
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719     00F7                     _get7SegmentPattern:	
   720                           ;psect for function _get7SegmentPattern
   721                           
   722                           
   723                           ;incstack = 0
   724                           ; Regs used in _get7SegmentPattern: [wreg-fsr0h+status,2+status,0]
   725                           ;get7SegmentPattern@digit stored from wreg
   726     00F7  00F0               	movwf	get7SegmentPattern@digit
   727     00F8                     l831:
   728                           
   729                           ;main.c: 63:     uint8_t pattern;;main.c: 65:     switch (digit) {
   730     00F8  2919               	goto	l837
   731     00F9                     l60:	
   732                           ;main.c: 66:         case 0: pattern = 0b00111111; break;
   733                           
   734     00F9  303F               	movlw	63
   735     00FA  00F1               	movwf	get7SegmentPattern@pattern
   736     00FB  2939               	goto	l839
   737     00FC                     l62:	
   738                           ;main.c: 67:         case 1: pattern = 0b00000110; break;
   739                           
   740     00FC  3006               	movlw	6
   741     00FD  00F1               	movwf	get7SegmentPattern@pattern
   742     00FE  2939               	goto	l839
   743     00FF                     l63:	
   744                           ;main.c: 68:         case 2: pattern = 0b01011011; break;
   745                           
   746     00FF  305B               	movlw	91
   747     0100  00F1               	movwf	get7SegmentPattern@pattern
   748     0101  2939               	goto	l839
   749     0102                     l64:	
   750                           ;main.c: 69:         case 3: pattern = 0b01001111; break;
   751                           
   752     0102  304F               	movlw	79
   753     0103  00F1               	movwf	get7SegmentPattern@pattern
   754     0104  2939               	goto	l839
   755     0105                     l65:	
   756                           ;main.c: 70:         case 4: pattern = 0b01100110; break;
   757                           
   758     0105  3066               	movlw	102
   759     0106  00F1               	movwf	get7SegmentPattern@pattern
   760     0107  2939               	goto	l839
   761     0108                     l66:	
   762                           ;main.c: 71:         case 5: pattern = 0b01101101; break;
   763                           
   764     0108  306D               	movlw	109
   765     0109  00F1               	movwf	get7SegmentPattern@pattern
   766     010A  2939               	goto	l839
   767     010B                     l67:	
   768                           ;main.c: 72:         case 6: pattern = 0b01111101; break;
   769                           
   770     010B  307D               	movlw	125
   771     010C  00F1               	movwf	get7SegmentPattern@pattern
   772     010D  2939               	goto	l839
   773     010E                     l68:	
   774                           ;main.c: 73:         case 7: pattern = 0b00000111; break;
   775                           
   776     010E  3007               	movlw	7
   777     010F  00F1               	movwf	get7SegmentPattern@pattern
   778     0110  2939               	goto	l839
   779     0111                     l69:	
   780                           ;main.c: 74:         case 8: pattern = 0b01111111; break;
   781                           
   782     0111  307F               	movlw	127
   783     0112  00F1               	movwf	get7SegmentPattern@pattern
   784     0113  2939               	goto	l839
   785     0114                     l70:	
   786                           ;main.c: 75:         case 9: pattern = 0b01101111; break;
   787                           
   788     0114  306F               	movlw	111
   789     0115  00F1               	movwf	get7SegmentPattern@pattern
   790     0116  2939               	goto	l839
   791     0117                     l833:
   792     0117  01F1               	clrf	get7SegmentPattern@pattern
   793     0118  2939               	goto	l839
   794     0119                     l837:
   795     0119  0870               	movf	get7SegmentPattern@digit,w
   796                           
   797                           ; Switch size 1, requested type "simple"
   798                           ; Number of cases is 10, Range of values is 0 to 9
   799                           ; switch strategies available:
   800                           ; Name         Instructions Cycles
   801                           ; direct_byte           26     6 (fixed)
   802                           ; simple_byte           31    16 (average)
   803                           ; jumptable            260     6 (fixed)
   804                           ;	Chosen strategy is simple_byte
   805     011A  3A00               	xorlw	0	; case 0
   806     011B  1903               	skipnz
   807     011C  28F9               	goto	l60
   808     011D  3A01               	xorlw	1	; case 1
   809     011E  1903               	skipnz
   810     011F  28FC               	goto	l62
   811     0120  3A03               	xorlw	3	; case 2
   812     0121  1903               	skipnz
   813     0122  28FF               	goto	l63
   814     0123  3A01               	xorlw	1	; case 3
   815     0124  1903               	skipnz
   816     0125  2902               	goto	l64
   817     0126  3A07               	xorlw	7	; case 4
   818     0127  1903               	skipnz
   819     0128  2905               	goto	l65
   820     0129  3A01               	xorlw	1	; case 5
   821     012A  1903               	skipnz
   822     012B  2908               	goto	l66
   823     012C  3A03               	xorlw	3	; case 6
   824     012D  1903               	skipnz
   825     012E  290B               	goto	l67
   826     012F  3A01               	xorlw	1	; case 7
   827     0130  1903               	skipnz
   828     0131  290E               	goto	l68
   829     0132  3A0F               	xorlw	15	; case 8
   830     0133  1903               	skipnz
   831     0134  2911               	goto	l69
   832     0135  3A01               	xorlw	1	; case 9
   833     0136  1903               	skipnz
   834     0137  2914               	goto	l70
   835     0138  2917               	goto	l833
   836     0139                     l839:
   837                           
   838                           ;main.c: 79:     return pattern;
   839     0139  0871               	movf	get7SegmentPattern@pattern,w
   840     013A                     l72:
   841     013A  0008               	return
   842     013B                     __end_of_get7SegmentPattern:
   843                           
   844                           	psect	text3
   845     009C                     __ptext3:	
   846 ;; *************** function _displayDigits *****************
   847 ;; Defined at:
   848 ;;		line 82 in file "main.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;  digit0          1    wreg     unsigned char 
   851 ;;  digit1          1    0[COMMON] unsigned char 
   852 ;;  digit2          1    1[COMMON] unsigned char 
   853 ;; Auto vars:     Size  Location     Type
   854 ;;  digit0          1    4[COMMON] unsigned char 
   855 ;;  i               2    5[COMMON] int 
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, status,2, status,0
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   865 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   866 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   868 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   869 ;;Total ram usage:        7 bytes
   870 ;; Hardware stack levels used: 1
   871 ;; Hardware stack levels required when called: 1
   872 ;; This function calls:
   873 ;;		Nothing
   874 ;; This function is called by:
   875 ;;		_main
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879     009C                     _displayDigits:	
   880                           ;psect for function _displayDigits
   881                           
   882                           
   883                           ;incstack = 0
   884                           ; Regs used in _displayDigits: [wreg+status,2+status,0]
   885                           ;displayDigits@digit0 stored from wreg
   886     009C  00F4               	movwf	displayDigits@digit0
   887     009D                     l843:
   888                           
   889                           ;main.c: 83:     int i;;main.c: 84:     for ( i=0 ; i<8 ; i++ ){
   890     009D  01F5               	clrf	displayDigits@i
   891     009E  01F6               	clrf	displayDigits@i+1
   892     009F                     l849:
   893                           
   894                           ;main.c: 86:         PORTAbits.RA5 = (digit0 >> i) & (0x01);
   895     009F  0874               	movf	displayDigits@digit0,w
   896     00A0  00F2               	movwf	??_displayDigits
   897     00A1  0A75               	incf	displayDigits@i,w
   898     00A2  28A4               	goto	u274
   899     00A3                     u275:
   900     00A3  36F2               	lsrf	??_displayDigits,f
   901     00A4                     u274:
   902     00A4  0B89               	decfsz	9,f
   903     00A5  28A3               	goto	u275
   904     00A6  0872               	movf	??_displayDigits,w
   905     00A7  3901               	andlw	1
   906     00A8  00F3               	movwf	??_displayDigits+1
   907     00A9  0EF3               	swapf	??_displayDigits+1,f
   908     00AA  0DF3               	rlf	??_displayDigits+1,f
   909     00AB  0020               	movlb	0	; select bank0
   910     00AC  080C               	movf	12,w	;volatile
   911     00AD  0673               	xorwf	??_displayDigits+1,w
   912     00AE  39DF               	andlw	-33
   913     00AF  0673               	xorwf	??_displayDigits+1,w
   914     00B0  008C               	movwf	12	;volatile
   915                           
   916                           ;main.c: 87:         PORTAbits.RA4 = (digit1 >> i) & (0x01);
   917     00B1  0870               	movf	displayDigits@digit1,w
   918     00B2  00F2               	movwf	??_displayDigits
   919     00B3  0A75               	incf	displayDigits@i,w
   920     00B4  28B6               	goto	u284
   921     00B5                     u285:
   922     00B5  36F2               	lsrf	??_displayDigits,f
   923     00B6                     u284:
   924     00B6  0B89               	decfsz	9,f
   925     00B7  28B5               	goto	u285
   926     00B8  0872               	movf	??_displayDigits,w
   927     00B9  3901               	andlw	1
   928     00BA  00F3               	movwf	??_displayDigits+1
   929     00BB  0EF3               	swapf	??_displayDigits+1,f
   930     00BC  080C               	movf	12,w	;volatile
   931     00BD  0673               	xorwf	??_displayDigits+1,w
   932     00BE  39EF               	andlw	-17
   933     00BF  0673               	xorwf	??_displayDigits+1,w
   934     00C0  008C               	movwf	12	;volatile
   935                           
   936                           ;main.c: 88:         PORTCbits.RC5 = (digit2 >> i) & (0x01);
   937     00C1  0871               	movf	displayDigits@digit2,w
   938     00C2  00F2               	movwf	??_displayDigits
   939     00C3  0A75               	incf	displayDigits@i,w
   940     00C4  28C6               	goto	u294
   941     00C5                     u295:
   942     00C5  36F2               	lsrf	??_displayDigits,f
   943     00C6                     u294:
   944     00C6  0B89               	decfsz	9,f
   945     00C7  28C5               	goto	u295
   946     00C8  0872               	movf	??_displayDigits,w
   947     00C9  3901               	andlw	1
   948     00CA  00F3               	movwf	??_displayDigits+1
   949     00CB  0EF3               	swapf	??_displayDigits+1,f
   950     00CC  0DF3               	rlf	??_displayDigits+1,f
   951     00CD  080E               	movf	14,w	;volatile
   952     00CE  0673               	xorwf	??_displayDigits+1,w
   953     00CF  39DF               	andlw	-33
   954     00D0  0673               	xorwf	??_displayDigits+1,w
   955     00D1  008E               	movwf	14	;volatile
   956     00D2                     l851:
   957                           
   958                           ;main.c: 91:         PORTCbits.RC3 = 1;
   959     00D2  158E               	bsf	14,3	;volatile
   960     00D3                     l853:
   961                           
   962                           ;main.c: 92:         _delay((unsigned long)((500)*(4000000/4000000.0)));
   963     00D3  30A6               	movlw	166
   964     00D4                     u567:
   965     00D4  0B89               	decfsz	9,f
   966     00D5  28D4               	goto	u567
   967     00D6  3200               	nop2
   968     00D7                     l855:
   969                           
   970                           ;main.c: 93:         PORTCbits.RC3 = 0;
   971     00D7  0020               	movlb	0	; select bank0
   972     00D8  118E               	bcf	14,3	;volatile
   973     00D9                     l857:
   974                           
   975                           ;main.c: 94:         _delay((unsigned long)((500)*(4000000/4000000.0)));
   976     00D9  30A6               	movlw	166
   977     00DA                     u577:
   978     00DA  0B89               	decfsz	9,f
   979     00DB  28DA               	goto	u577
   980     00DC  3200               	nop2
   981     00DD                     l859:
   982                           
   983                           ;main.c: 95:     }
   984     00DD  3001               	movlw	1
   985     00DE  07F5               	addwf	displayDigits@i,f
   986     00DF  3000               	movlw	0
   987     00E0  3DF6               	addwfc	displayDigits@i+1,f
   988     00E1                     l861:
   989     00E1  0876               	movf	displayDigits@i+1,w
   990     00E2  3A80               	xorlw	128
   991     00E3  00F2               	movwf	??_displayDigits
   992     00E4  3080               	movlw	128
   993     00E5  0272               	subwf	??_displayDigits,w
   994     00E6  1D03               	skipz
   995     00E7  28EA               	goto	u305
   996     00E8  3008               	movlw	8
   997     00E9  0275               	subwf	displayDigits@i,w
   998     00EA                     u305:
   999     00EA  1C03               	skipc
  1000     00EB  28ED               	goto	u301
  1001     00EC  28EE               	goto	u300
  1002     00ED                     u301:
  1003     00ED  289F               	goto	l849
  1004     00EE                     u300:
  1005     00EE                     l76:
  1006                           
  1007                           ;main.c: 98:     PORTCbits.RC4 = 1;
  1008     00EE  0020               	movlb	0	; select bank0
  1009     00EF  160E               	bsf	14,4	;volatile
  1010     00F0                     l863:
  1011                           
  1012                           ;main.c: 99:     _delay((unsigned long)((500)*(4000000/4000000.0)));
  1013     00F0  30A6               	movlw	166
  1014     00F1                     u587:
  1015     00F1  0B89               	decfsz	9,f
  1016     00F2  28F1               	goto	u587
  1017     00F3  3200               	nop2
  1018     00F4                     l865:
  1019                           
  1020                           ;main.c: 100:     PORTCbits.RC4 = 0;
  1021     00F4  0020               	movlb	0	; select bank0
  1022     00F5  120E               	bcf	14,4	;volatile
  1023     00F6                     l77:
  1024     00F6  0008               	return
  1025     00F7                     __end_of_displayDigits:
  1026                           
  1027                           	psect	intentry
  1028     0004                     __pintentry:	
  1029 ;; *************** function _ISR *****************
  1030 ;; Defined at:
  1031 ;;		line 120 in file "main.c"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;		None
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;		None
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  1    wreg      void 
  1038 ;; Registers used:
  1039 ;;		None
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1049 ;;Total ram usage:        0 bytes
  1050 ;; Hardware stack levels used: 1
  1051 ;; This function calls:
  1052 ;;		Nothing
  1053 ;; This function is called by:
  1054 ;;		Interrupt level 1
  1055 ;; This function uses a non-reentrant model
  1056 ;;
  1057                           
  1058     0004                     _ISR:
  1059                           
  1060                           ;incstack = 0
  1061     0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  1062                           
  1063                           ; Regs used in _ISR: []
  1064     0005  3180               	pagesel	$
  1065     0006                     i1l879:
  1066                           
  1067                           ;main.c: 122:     if ( INTCONbits.IOCIF ) {
  1068     0006  1C0B               	btfss	11,0	;volatile
  1069     0007  2809               	goto	u31_21
  1070     0008  280A               	goto	u31_20
  1071     0009                     u31_21:
  1072     0009  2815               	goto	i1l87
  1073     000A                     u31_20:
  1074     000A                     i1l881:
  1075                           
  1076                           ;main.c: 124:         if( IOCBFbits.IOCBF5 ){
  1077     000A  0027               	movlb	7	; select bank7
  1078     000B  1E96               	btfss	22,5	;volatile
  1079     000C  280E               	goto	u32_21
  1080     000D  280F               	goto	u32_20
  1081     000E                     u32_21:
  1082     000E  2813               	goto	i1l86
  1083     000F                     u32_20:
  1084     000F                     i1l883:
  1085                           
  1086                           ;main.c: 126:             IOCBFbits.IOCBF5 = 0;
  1087     000F  1296               	bcf	22,5	;volatile
  1088                           
  1089                           ;main.c: 128:             turnOnDisplay = 1;
  1090     0010  3001               	movlw	1
  1091     0011  0020               	movlb	0	; select bank0
  1092     0012  00A0               	movwf	_turnOnDisplay
  1093     0013                     i1l86:	
  1094                           ;main.c: 129:         }
  1095                           
  1096                           
  1097                           ;main.c: 131:         INTCONbits.INTF = 0;
  1098     0013  108B               	bcf	11,1	;volatile
  1099                           
  1100                           ;main.c: 132:         INTCONbits.IOCIF = 0;
  1101     0014  100B               	bcf	11,0	;volatile
  1102     0015                     i1l87:
  1103     0015  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1104     0016  0009               	retfie
  1105     0017                     __end_of_ISR:
  1106     0002                     ___latbits      equ	2
  1107     007E                     btemp           set	126	;btemp
  1108     007E                     int$flags       set	126
  1109     007E                     wtemp0          set	126
  1110                           
  1111                           	psect	config
  1112                           
  1113                           ;Config register CONFIG1 @ 0x8007
  1114                           ;	Oscillator Selection Bits
  1115                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  1116                           ;	Watchdog Timer Enable
  1117                           ;	WDTE = OFF, WDT disabled
  1118                           ;	Power-up Timer Enable
  1119                           ;	PWRTE = OFF, PWRT disabled
  1120                           ;	MCLR Pin Function Select
  1121                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  1122                           ;	Flash Program Memory Code Protection
  1123                           ;	CP = OFF, Program memory code protection is disabled
  1124                           ;	Brown-out Reset Enable
  1125                           ;	BOREN = ON, Brown-out Reset enabled
  1126                           ;	Clock Out Enable
  1127                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  1128                           ;	Internal/External Switchover Mode
  1129                           ;	IESO = OFF, Internal/External Switchover Mode is disabled
  1130                           ;	Fail-Safe Clock Monitor Enable
  1131                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  1132     8007                     	org	32775
  1133     8007  2FE4               	dw	12260
  1134                           
  1135                           ;Config register CONFIG2 @ 0x8008
  1136                           ;	Flash Memory Self-Write Protection
  1137                           ;	WRT = OFF, Write protection off
  1138                           ;	CPU System Clock Selection Bit
  1139                           ;	CPUDIV = CLKDIV6, CPU system clock divided by 6
  1140                           ;	USB Low Speed Clock Selection bit
  1141                           ;	USBLSCLK = 48MHz, System clock expects 48 MHz, FS/LS USB CLKENs divide-by is set to 8.
  1142                           ;	PLL Multiplier Selection Bit
  1143                           ;	PLLMULT = 3x, 3x Output Frequency Selected
  1144                           ;	PLL Enable Bit
  1145                           ;	PLLEN = ENABLED, 3x or 4x PLL Enabled
  1146                           ;	Stack Overflow/Underflow Reset Enable
  1147                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  1148                           ;	Brown-out Reset Voltage Selection
  1149                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  1150                           ;	Low-Power Brown Out Reset
  1151                           ;	LPBOR = OFF, Low-Power BOR is disabled
  1152                           ;	Low-Voltage Programming Enable
  1153                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  1154     8008                     	org	32776
  1155     8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         7
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80      0       3
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_displayDigits

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     251
                                              7 COMMON     2     2      0
                      _displayDigits
                 _get7SegmentPattern
                 _setButtonInterrupt
 ---------------------------------------------------------------------------------
 (1) _setButtonInterrupt                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get7SegmentPattern                                   2     2      0      62
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayDigits                                        7     5      2     189
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _displayDigits
   _get7SegmentPattern
   _setButtonInterrupt

 _ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BITBANK3            80      0       0      0.0%
BITBANK4            80      0       0      0.0%
BITBANK5            80      0       0      0.0%
BITBANK6            80      0       0      0.0%
BITBANK7            80      0       0      0.0%
BITBANK8            80      0       0      0.0%
BITBANK9            80      0       0      0.0%
BITBANK10           80      0       0      0.0%
BITBANK11           80      0       0      0.0%
BITBANK12           48      0       0      0.0%
BIGRAM            1008      0       0      0.0%
COMMON              14      9      14    100.0%
BANK0               80      0       3      3.8%
BANK1               80      0       0      0.0%
BANK2               80      0       0      0.0%
BANK3               80      0       0      0.0%
BANK4               80      0       0      0.0%
BANK5               80      0       0      0.0%
BANK6               80      0       0      0.0%
BANK7               80      0       0      0.0%
BANK8               80      0       0      0.0%
BANK9               80      0       0      0.0%
BANK10              80      0       0      0.0%
BANK11              80      0       0      0.0%
BANK12              48      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      17      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sun Sep 15 15:14:43 2024

                        l60 00F9                          l70 0114                          l62 00FC  
                        l63 00FF                          l72 013A                          l64 0102  
                        l80 0142                          l65 0105                          l66 0108  
                        l67 010B                          l76 00EE                          l68 010E  
                        l77 00F6                          l69 0111                          l94 0062  
                       l901 0041                         l831 00F8                         l911 0047  
                       l903 0043                         l833 0117                         l921 004F  
                       l913 0048                         l905 0044                         l851 00D2  
                       l843 009D                         l931 0058                         l923 0051  
                       l915 004A                         l907 0045                         l861 00E1  
                       l853 00D3                         l837 0119                         l933 0059  
                       l925 0052                         l917 004C                         l909 0046  
                       l863 00F0                         l855 00D7                         l839 0139  
                       l871 013E                         l951 0088                         l943 006D  
                       l935 005B                         l927 0053                         l919 004E  
                       l865 00F4                         l857 00D9                         l849 009F  
                       l873 013F                         l953 008E                         l945 0072  
                       l937 005D                         l929 0056                         l859 00DD  
                       l875 0140                         l867 013B                         l947 007A  
                       l939 005D                         l891 003C                         l877 0141  
                       l869 013D                         l949 0085                         l893 003D  
                       l885 0028                         l895 003E                         l887 002F  
                       l897 003F                         l889 003A                         l899 0040  
                       u300 00EE                         u301 00ED                         u305 00EA  
                       u330 0072                         u331 0071                         u274 00A4  
                       u275 00A3                         u284 00B6                         _ISR 0004  
                       u285 00B5                         u294 00C6                         u295 00C5  
                       u537 0034                         u547 007F                         u557 0093  
                       u567 00D4                         u577 00DA                         u587 00F1  
                       wreg 0009              ?_displayDigits 0070                        ?_ISR 0070  
                      i1l86 0013                        i1l87 0015                        _main 0028  
                      btemp 007E                        start 0017                       ??_ISR 0070  
       displayDigits@digit0 0074         displayDigits@digit1 0070         displayDigits@digit2 0071  
                     ?_main 0070                       _IOCBN 0395                       i1l881 000A  
                     i1l883 000F                       i1l879 0006                       u31_20 000A  
                     u31_21 0009                       u32_20 000F                       u32_21 000E  
                     status 0003                       wtemp0 007E             __initialization 0019  
              __end_of_main 009C                      ??_main 0077             ??_displayDigits 0072  
                    _ADCON0 009D          _get7SegmentPattern 00F7                      _ANSELA 018C  
                    _ANSELB 018D                      _ANSELC 018E         ?_get7SegmentPattern 0070  
        _setButtonInterrupt 013B         ?_setButtonInterrupt 0070        ??_get7SegmentPattern 0070  
      ??_setButtonInterrupt 0070     __end_of__initialization 0024              __pcstackCOMMON 0070  
              __pidataBANK0 0143               _turnOnDisplay 0020                _batteryLevel 0022  
                __pbssBANK0 0020                  __pmaintext 0028                  __pintentry 0004  
            displayDigits@i 0075                     __ptext1 013B                     __ptext2 00F7  
                   __ptext3 009C                   _IOCBFbits 0396                   _IOCBPbits 0394  
      end_of_initialization 0024                   _RCSTAbits 019D                   _PORTAbits 000C  
                 _PORTCbits 000E       __end_of_displayDigits 00F7                   _TRISAbits 008C  
                 _TRISBbits 008D                   _TRISCbits 008E         start_initialization 0019  
               __end_of_ISR 0017                 __pdataBANK0 0022               _batteryDigit0 007D  
             _batteryDigit1 007C               _batteryDigit2 007B                 __pbssCOMMON 0079  
                 ___latbits 0002                    _LATAbits 010C                    _LATBbits 010D  
                  _LATCbits 010E                    _PIE1bits 0091   get7SegmentPattern@pattern 0071  
   get7SegmentPattern@digit 0070                 _segPattern0 007A                 _segPattern1 0079  
               _segPattern2 0021                    int$flags 007E  __end_of_get7SegmentPattern 013B  
                _INTCONbits 000B  __end_of_setButtonInterrupt 0143                    intlevel1 0000  
                _OSCCONbits 0099               _displayDigits 009C  
